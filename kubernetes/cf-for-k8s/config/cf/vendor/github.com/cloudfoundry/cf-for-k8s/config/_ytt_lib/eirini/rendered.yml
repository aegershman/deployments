apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-app-ingress
  namespace: cf-workloads
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: cf-system
      podSelector:
        matchLabels:
          app.kubernetes.io/component: router
    - namespaceSelector:
        matchLabels:
          name: cf-system
      podSelector:
        matchLabels:
          app.kubernetes.io/component: adapter
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: cf-workloads-app-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: false
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: cf-workloads-privileged-app-psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: eirini
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: runtime/default
    seccomp.security.alpha.kubernetes.io/defaultProfileName: runtime/default
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
  - ALL
  volumes:
  - configMap
  - emptyDir
  - projected
  - secret
  - downwardAPI
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  readOnlyRootFilesystem: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eirini
  namespace: cf-workloads
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eirini-privileged
  namespace: cf-workloads
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opi
  namespace: cf-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: eirini
  namespace: cf-system
data:
  opi.yml: |
    opi:
      app_namespace: cf-workloads
      registry_address: "registry.not-used:443"
      registry_secret_name: app-registry-credentials
      eirini_address: "https://eirini-opi.cf-system.svc.cluster.local:8085"
      downloader_image: eirini/recipe-downloader@sha256:2a6b44717c2292ea4091c18dece4a970d2647eb6f5660b5071d56795ac2d83fb
      executor_image: eirini/recipe-executor@sha256:bfd2f4af51ee077ba5ff1a11d3956f69c9aa44f34c3b84a5a5087effc562457b
      uploader_image: eirini/recipe-uploader@sha256:1a0722527455a17d8e5d93013f1ff0510906b6c805c8adb6a3af8e3306220f97

      cc_uploader_secret_name: secrets-2.16.4-2
      cc_uploader_cert_path: cc-server-crt
      cc_uploader_key_path: cc-server-crt-key

      client_certs_secret_name: secrets-2.16.4-2
      client_cert_path: eirini-client-crt
      client_key_path: eirini-client-crt-key

      ca_cert_secret_name: secrets-2.16.4-2
      ca_cert_path: internal-ca-cert

      cc_cert_path: "/workspace/jobs/opi/secrets/cc.crt"
      cc_key_path: "/workspace/jobs/opi/secrets/cc.key"
      cc_ca_path: "/workspace/jobs/opi/secrets/cc.ca"
      rootfs_version: v75.0.0
      client_ca_path: "/workspace/jobs/opi/secrets/eirini.ca"
      server_cert_path: "/workspace/jobs/opi/secrets/eirini-server.crt"
      server_key_path: "/workspace/jobs/opi/secrets/eirini-server.key"
      tls_port: 8085
      disk_limit_mb: 2048
      application_service_account: eirini
      application_privileged_service_account: eirini-privileged
  routing.yml: |
    app_namespace: cf-workloads
    nats_ip: "nats-nats.cf-system.svc.cluster.local"
    nats_port: 4222
  metrics.yml: |
    app_namespace: cf-workloads
    loggregator_address: "doppler-doppler.cf-system.svc.cluster.local:8082"
    loggergator_cert_path: "/etc/eirini/secrets/doppler.crt"
    loggregator_key_path: "/etc/eirini/secrets/doppler.key"
    loggregator_ca_path: "/etc/eirini/secrets/doppler.ca"
  events.yml: |
    app_namespace: cf-workloads
    cc_internal_api: "https://api.cf-system.svc.cluster.local:9023"
    cc_cert_path: "/etc/eirini/secrets/cc.crt"
    cc_key_path: "/etc/eirini/secrets/cc.key"
    cc_ca_path: "/etc/eirini/secrets/cc.ca"
  staging-reporter.yml: |
    app_namespace: cf-workloads
    eirini_cert_path: "/etc/eirini/secrets/eirini-client.crt"
    eirini_key_path: "/etc/eirini/secrets/eirini-client.key"
    ca_path: "/etc/eirini/secrets/eirini-client.ca"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cf-workloads-app-role
  namespace: cf-workloads
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - cf-workloads-app-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cf-workloads-privileged-app-role
  namespace: cf-workloads
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - cf-workloads-privileged-app-psp
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eirini-role
  namespace: cf-workloads
rules:
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
  - delete
- apiGroups:
  - apps
  resources:
  - statefulsets
  verbs:
  - create
  - update
  - delete
  - list
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - list
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - delete
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: eirini-role
  namespace: cf-system
rules:
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - use
  resourceNames:
  - eirini
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cf-workloads-app-rolebinding
  namespace: cf-workloads
roleRef:
  kind: Role
  name: cf-workloads-app-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: eirini
  namespace: cf-workloads
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cf-workloads-privileged-app-rolebinding
  namespace: cf-workloads
roleRef:
  kind: Role
  name: cf-workloads-privileged-app-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: eirini-privileged
  namespace: cf-workloads
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eirini-rolebinding
  namespace: cf-workloads
roleRef:
  kind: Role
  name: eirini-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: opi
  namespace: cf-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: eirini-rolebinding
  namespace: cf-system
roleRef:
  kind: Role
  name: eirini-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: opi
  namespace: cf-system
- kind: ServiceAccount
  name: eirini-rootfs-patcher
  namespace: cf-system
- kind: ServiceAccount
  name: eirini-secret-smuggler
  namespace: cf-system
---
apiVersion: v1
kind: Service
metadata:
  name: eirini
  namespace: cf-system
spec:
  ports:
  - port: 8085
    protocol: TCP
    name: https
  selector:
    name: eirini
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eirini
  namespace: cf-system
spec:
  selector:
    matchLabels:
      name: eirini
  template:
    metadata:
      labels:
        name: eirini
        eirinifs_version: v75.0.0
    spec:
      dnsPolicy: ClusterFirst
      serviceAccountName: opi
      volumes:
      - name: config-map-volume
        configMap:
          name: eirini
          items:
          - key: opi.yml
            path: opi.yml
      - name: cf-secrets
        projected:
          sources:
          - secret:
              name: eirini-internal-tls-certs
              items:
              - key: tls.crt
                path: cc.crt
              - key: tls.key
                path: cc.key
          - secret:
              name: eirini-internal-tls-certs
              items:
              - key: tls.ca
                path: cc.ca
          - secret:
              name: eirini-internal-tls-certs
              items:
              - key: tls.crt
                path: eirini-server.crt
              - key: tls.key
                path: eirini-server.key
          - secret:
              name: eirini-internal-tls-certs
              items:
              - key: tls.ca
                path: eirini.ca
      securityContext:
        runAsNonRoot: true
      containers:
      - name: opi
        image: eirini/opi@sha256:2e0b84c5fcb1e6e5cdb07a70210f2e462aa52119f7a330660a7444a938deefbb
        imagePullPolicy: Always
        volumeMounts:
        - name: config-map-volume
          mountPath: /workspace/jobs/opi/config
        - name: cf-secrets
          mountPath: /workspace/jobs/opi/secrets
        ports:
        - containerPort: 8085
          name: https
        resources:
          requests:
            cpu: 20m
            memory: 20Mi
