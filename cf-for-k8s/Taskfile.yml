# https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy-local.md
# https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy.md
# https://github.com/cloudfoundry/cf-k8s-networking/blob/917b615a745510ec944ab8f66efdd1fa78c5fc6b/doc/managing-certificates-for-application-ingress.md
# https://github.com/cloudfoundry/cf-k8s-networking/tree/master/doc/no-loadbalancer
---
version: "2"

tasks:
  full-install-steps:
    cmds:
      - task: clean-generated-values
      - task: generate-values
      - task: apply-cf

  clean-generated-values:
    cmds:
      - | # when you remove these from /tmp and re-run the generate-values script it'll give you new passwords, certs, etc.
        rm -f /tmp/cf-values.yml
        rm -f /tmp/cf-for-k8s-rendered.yml
        rm -rf /tmp/vcap.me

  generate-values:
    cmds:
      - | # vcap.me == nip.io == xip.io, allowing for localhost dns
        ./config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/hack/generate-values.sh \
          --silence-hack-warning \
          --cf-domain vcap.me \
          >config/cf/values/cf-values.yml
      - |
        ytt \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/remove-ingressgateway-service.yml \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/remove-resource-requirements.yml \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/add-metrics-server-components.yml \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/patch-metrics-server.yml \
          -f config/cf/values/cf-values.yml \
          -f config/cf/values/config-optional/cf-registry-values.yml \
          >config/cf/values/cf-for-k8s-rendered.yml

  apply-cf:
    cmds:
      - |
        kapp deploy -a cf -f config/cf/values/cf-for-k8s-rendered.yml --yes

  delete-cf:
    cmds:
      - |
        kapp delete -a cf -y

  post-install:
    cmds:
      - |
        cf api --skip-ssl-validation https://api.vcap.me
        cf auth admin $(yq r config/cf/values/cf-values.yml 'cf_admin_password')
        cf create-org test-org
        cf create-space -o test-org test-space
        cf target -o test-org -s test-space
      - | # push an app already built via docker:
        cf enable-feature-flag diego_docker
        cf push -f config/cf/values/example-docker-cf-manifest-hash-browns.yml
        cf push -f config/cf/values/example-docker-cf-manifest-hash-browns-no-web.yml
        cf push -f config/cf/values/example-docker-cf-manifest-todo-ui.yml
      - | # push an app from source code:
        cf push test-node-app -p config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/tests/smoke/assets/test-node-app
        curl http://test-node-app.vcap.me/env
      - | # assuming minibroker is installed:
        cf create-service-broker minibroker user pass http://minibroker-minibroker.minibroker.svc
        cf enable-service-access mysql
        cf enable-service-access redis
        cf enable-service-access mongodb
        cf enable-service-access mariadb
        cf create-service mariadb 10-3-22 mariadb-svc
        cf service mariadb-svc
        cf create-service-key mariadb-svc mykey
        cf bind-service todo-ui mariadb-svc

  harbor:
    cmds:
      - exit 1
      # for dockerhub, the registry auth target is "https://index.docker.io/v1/".
      # notice "library" is the project and "kuard-amd64" is the repository;
      # the repository was created automatically by virtue of the push.
      - |
        kubectl -n cf-workloads-staging get images
        logs -namespace cf-workloads-staging -image IMAGEHERE
      - |
        kubectl -n harbor port-forward svc/harbor 8080:80
        kubectl -n cf-workloads-staging describe pods
        curl -u admin:admin localhost:8080/api/v2.0/systeminfo
        curl localhost:8080/api/v2.0/systeminfo
        curl localhost:8080/api/v2.0/users/current
        curl -u admin:admin localhost:8080/api/v2.0/users/current
        curl -u admin:admin localhost:8080/api/v2.0/projects
        curl -u admin:admin localhost:8080/api/v2.0/projects/library/repositories
      - |
        kubectl -n harbor port-forward svc/harbor 8080:80
      - |
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=core --tail 250
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=database --tail 250
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=jobservice --tail 250
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=nginx
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=portal --tail 250
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=redis --tail 250
        kubectl -n harbor logs -f -lapp=harbor -lcomponent=registry -c registry
      - |
        docker login --username admin --password Harbor12345 localhost:4107
        docker pull gcr.io/kuar-demo/kuard-amd64:blue
        docker tag gcr.io/kuar-demo/kuard-amd64:blue localhost:4107/library/kuard-amd64:blue
        docker images
        docker push localhost:4107/library/kuard-amd64:blue

  istio:
    cmds:
      - exit 1
      - | # https://istio.io/latest/docs/ops/common-problems/injection/
        kubectl get mutatingwebhookconfiguration istio-sidecar-injector -o yaml | grep "namespaceSelector:" -A5
        kubectl get namespace -L istio-injection
      - | # setup namespaces with istio annotation injection label
        kubectl label --overwrite namespace prometheus-operator "istio-injection=enabled"
        kubectl apply -f config/harbor/harbor-namespace.yml
        kubectl apply -f config/jaeger-operator/jaeger-operator-namespace.yml
        kubectl apply -f config/prometheus-operator/prometheus-operator-namespace.yml
      - | # example of using a virtualservice for ingress against non-CF deployments
        kubectl apply -f config/harbor/harbor-virtual-service.yml
        kubectl apply -f config/jaeger-operator/jaeger-virtual-service.yml
        kubectl apply -f config/prometheus-operator/alertmanager-virtual-service.yml
        kubectl apply -f config/prometheus-operator/grafana-virtual-service.yml
        kubectl apply -f config/prometheus-operator/prometheus-virtual-service.yml
      - |
        kubectl delete -f config/harbor/harbor-virtual-service.yml
        kubectl delete -f config/jaeger-operator/jaeger-virtual-service.yml
        kubectl delete -f config/prometheus-operator/alertmanager-virtual-service.yml
        kubectl delete -f config/prometheus-operator/grafana-virtual-service.yml
        kubectl delete -f config/prometheus-operator/prometheus-virtual-service.yml
