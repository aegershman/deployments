---
version: "2"

# https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy-local.md
# https://github.com/cloudfoundry/cf-for-k8s/blob/master/docs/deploy.md
tasks:
  apply-metrics-server:
    cmds: # we're using metrics-server packaged with cf-for-k8s, but will leave this here
      - kubectl apply --recursive --filename config/cf/vendor/github.com/kubernetes-sigs

  generate-values:
    cmds:
      - | # vcap.me == nip.io == xip.io, allowing for localhost dns
        ./config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/hack/generate-values.sh \
          --cf-domain vcap.me \
          >config/cf/values/cf-values.yml
      - |
        ytt \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/remove-ingressgateway-service.yml \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/remove-resource-requirements.yml \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/add-metrics-server-components.yml \
          -f config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/config-optional/patch-metrics-server.yml \
          -f config/cf/values/cf-values.yml \
          >config/cf/values/cf-for-k8s-ytt.yml

  clean-generated-values:
    cmds:
      - | # when you remove these from /tmp and re-run the generate-values script it'll give you new passwords, certs, etc.
        rm -f /tmp/cf-values.yml
        rm -f /tmp/cf-for-k8s-ytt.yml
        rm -rf /tmp/vcap.me

  apply-cf:
    cmds:
      - kapp deploy -a cf -f config/cf/values/cf-for-k8s-ytt.yml --yes

  delete-cf:
    cmds:
      - kapp delete -a cf -y

  post-install:
    cmds:
      - |
        cf api --skip-ssl-validation https://api.vcap.me
        cf auth admin $(yq r config/cf/values/cf-values.yml 'cf_admin_password')
      - |
        cf create-org test-org
        cf create-space -o test-org test-space
        cf target -o test-org -s test-space
      - | # push an app already built via docker:
        cf enable-feature-flag diego_docker
        cf push -f config/cf/values/example-docker-cf-manifest-hash-browns.yml
        cf push -f config/cf/values/example-docker-cf-manifest-todo-ui.yml
      - | # push an app from source code:
        cf push test-node-app -p config/cf/vendor/github.com/cloudfoundry/cf-for-k8s/tests/smoke/assets/test-node-app
        curl http://test-node-app.vcap.me/env
      - | # assuming minibroker is installed:
        cf create-service-broker minibroker user pass http://minibroker-minibroker.minibroker.svc
        cf enable-service-access mysql
        cf enable-service-access redis
        cf enable-service-access mongodb
        cf enable-service-access mariadb
        cf create-service mariadb 10-3-22 mariadb-svc
        cf service mariadb-svc
        cf create-service-key mariadb-svc mykey
        cf bind-service todo-ui mariadb-svc

  prometheus-operator:
    cmds:
      - exit 1
      - |
        kubectl apply -f config/cf/values/cf-hash-browns-service-monitor.yaml
        kubectl -n cf-workloads get servicemonitor -o yaml
        kubectl -n ingress-nginx get servicemonitor -o yaml

  full-install-steps:
    cmds:
      # - task: apply-metrics-server
      # - task: clean-generated-values
      - task: generate-values
      - task: apply-cf
      # - task: post-install

  debug:
    cmds:
      - | # not intended to be ran as a task, just for holding command strings
        exit 1
        kubectl -n cf-system logs -f -lapp=log-cache --all-containers --max-log-requests=6

  svccat:
    cmds:
      - | # not intended to be ran as a task, just for holding command strings
        exit 1
      - | # minibroker
        svcat register minibroker --url http://minibroker-minibroker.minibroker.svc --scope cluster
        svcat get brokers
        svcat sync broker minibroker
        svcat marketplace
        svcat provision redis-test --class redis --plan 5-0-7
        svcat provision redis-test --class redis --plan 5-0-7 --param p1=foo --param p2=bar --secret 'creds[db]'
        svcat bind redis-test --name redis-test
        svcat describe instance redis-test
        svcat deprovision redis-test
        svcat get instances

      - | # https://svc-cat.io/docs/cli/
        svcat register ups-broker --url http://ups-broker-ups-broker.ups-broker.svc.cluster.local --scope cluster
        svcat get brokers
        svcat sync broker ups-broker
        svcat marketplace
        svcat provision ups-instance --class user-provided-service --plan default
        svcat get instances
        svcat bind ups-instance --name ups-binding
        svcat bind ups-instance
        svcat describe instance ups-instance
        svcat unbind ups-instance
        svcat unbind  --name ups-binding
        svcat deregister ups-broker --scope cluster
        svcat get brokers --scope namespace

      - | # https://svc-cat.io/docs/walkthrough/
        svcat get classes
        kubectl get clusterserviceclasses
        svcat describe class mariadb
        kubectl get clusterserviceclasses mariadb -o yaml
        svcat get plans
        kubectl get clusterserviceplans
        svcat describe plan 10-3-22 --scope cluster
        kubectl get clusterserviceplans mariadb-10-3-22 -o yaml
        svcat deprovision -n test-ns mini-instance
        kubectl delete clusterservicebrokers minibroker

  harbor-debug:
    cmds:
      # for dockerhub, the registry auth target is "https://index.docker.io/v1/".
      # notice "library" is the project and "kuard-amd64" is the repository;
      # the repository was created automatically by virtue of the push.
      - | # no clue if this works
        exit 1
        kubectl -n harbor port-forward service/harbor-harbor-core 4107:80
        kubectl -n harbor port-forward deployment/harbor-harbor-core 4107:8080
        docker login --username admin --password Harbor12345 localhost:4107
        docker pull gcr.io/kuar-demo/kuard-amd64:blue
        docker tag gcr.io/kuar-demo/kuard-amd64:blue localhost:4107/library/kuard-amd64:blue
        docker images
        docker push localhost:4107/library/kuard-amd64:blue
