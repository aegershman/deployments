---
apiVersion: v1
data:
  HARBOR_ADMIN_PASSWORD: YWRtaW4=
  POSTGRESQL_PASSWORD: Y2hhbmdlaXQ=
  secret: ZzZFWkJVMEFpbXRaZ1dzcQ==
  secretKey: bm90LWEtc2VjdXJlLWtleQ==
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUUwekNDQXJ1Z0F3SUJBZ0lKQVBZL096TE1lVnEyTUEwR0NTcUdTSWIzRFFFQkN3VUFNQUF3SGhjTk1Ua3cKTkRFNE1ESXlOek0zV2hjTk1qa3dOREUxTURJeU56TTNXakFBTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQwpBZzhBTUlJQ0NnS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQWFOUU1FNHdIUVlEVlIwT0JCWUVGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUI4R0ExVWRJd1FZTUJhQQpGRmhOaFRvNFVBQzJQVXNmOGpZYVdqMTYwdkdFTUF3R0ExVWRFd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0lCQU1Bc0V0VmxFTE13ZHRjaWZIZU9UMGtPbWY1d285SW4vZUZTZ3NjQ3pCTURhUngyQjNxMzZBb1MKSWw3WFdBWnBldmFSN1c3eWVBUkthQXNoQkxoeWdVcUxEMHpXYktsU045SHByZDF3ZHBNMGZmeVBwTjVkeE9ZQQplcjA0eTEyR1JuQ2JNWXFpNGN2enRQNFRpblhxcTJ5SFNZaExiTzlxa0k1Z2JXVnhrUnVJY01Ldml4ZGRsbE5ZClEzb2JKYURESG1vdk0zK2cvRysxWUZndDRxRVMzOFhuSjdCclNzaEhubjVFSVFoMjg2eGZKcml5cksyaEhiTEoKcXowWXVGNkczRFhQZVdHZ1h2ajBIaXBjMGY4VURaa0tray9lR0VJNnZFa3l0eXZvZXBvWkkyWGJBZi9aTXk1bgpLd3VoRW40aGhrRk13V2FTV3AvaDBRZE1DYXhrNEJWU09xbU5WYUxTQjcrRmpzSWo0Q2FzRm90WWl5SjJncFJCCk5mOFFhUzRiejBUbjFlQmJDOGtzaitlM1pXZVgyYjV3Vk1qcWw5alR0MlgxSUNzOEtLZTN2RUJranFUMkFVaTIKNTJUdEt6bTczYVdyei9HUHkvUTJMQ29yM0ZoOUZHVlNCT0JCRFhHeTZNSnBOSEpuWVZIOUVFTkZHT2g4NW9sMQoycEFET0JCNXZBVS9rTEI1TEhQajJrdWUvRk1pSGFObnJTWUlHck1sQlNYMmpqOUVZYTF1dVVIK3BkNE1CajFGCjV1SDhPUmlhUTZodDIrV0hrbHhpYzFSajV5VFlRd1ZsSDcwQ0JPbitxVkVkbzYzeVF3ekFNSktGSXdsR1VRRVgKamlsamdjODZxNGNadFVURnJjd01pZGJrKzhRNitKYkRWZzdIVi8rcG5DK3dudjE5N2t3ZQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM3hsVUpzMmIvYUkyTkxveTRPSVErZG4veU1iL085OWlLRFJ5WktwSDhyU09tUytvCkY5dW5tU0F6TDY1WEEvdjZuWTBPTEkvZEFTRGprcWtCcElkVEd6b2dSNWY4VWlCNm9zdUVZN1Y3MVhaZHpXTHIKUGpuSnE2WkxBYW9LbXdHODBXNStXZDZWOFB5Z094NTJta3IxdzdJV0t6KzFaTEk1aXpicHBvbjdYVkdWUmFBVApSdk5aRGlKNkNlSnBjSjVINzIzbGtmNVJ2SldhdFpMQ1lJWURiUmZUaUtzeVEvU2xSY3Y1QlZmSGcvTEpTSDlRCkxHUmhQTUFSbGRsOXd5WkN3WlpESHhoZUk0YSsyNmFhOE1ZM3U5c3QvbDAvT282VkNUR3BNaUVoaUdGMkxWanAKVVdxLytCUDRTRkV2SmZxL0R1aW5JMTM5Vy81YVpaNy9Id1JQbG1ZVTZwWFRSTHlJZzdqZCsxOWZKd1I3WDM3cQp3MG84dDA2RmhqbXJDemFZQ1Vqb1JlcURtSGFObVpOL2Rkdkc3alpXQnUrak5oMFlhdnN5UXlDSVZtdjZ5cVNjCmpQaUQ5dWl2eHFUd2pKaWRJQlJmdVVyejNhRVJRN2NRZ2YwcWhxakl6Zmx6SGJGS2hJTG9jQldxN3p5Tmw5aHIKdlVHVC9XWmN3MHQvT3RNNzJTUGFwbG1UZ1ZiYlFSeGYyVkh6eXB0R0l2dHlkbFhLOHRoeE9NcFhvNGUrU2w4ZAoxZ2RRY0M0b2lzTjlGMjlvTnM4UDV5RlFQLy94WXV2OEM2MDduQ2oxRHpySWQ1YXZHL05WZktCL2ZiREtFRmdOCjJXaEhJblR6UExFY2pGNGZFcmNVQUV1V1cwYnVYLzZGSENHM2lUdHJxeUQ5MktUVkRmTjFKNTZycmNzQ0F3RUEKQVFLQ0FnRUFrOHE4czRQcnZZYnk3OVVWbFdKTktxY2V5a3dCa3hFMWZqcllPUldRMmhpQWlyeEdWNSs4bERULwprNnVqbTFFV3diNUswSHh4UktrYitQRWExSHFOTkhFNkp4TnBKS0s5ZXhEbFlBUSt4N2RGQnFWci8ybmF6bW80Ck1COE1MWWxtSXp0V1dvU1l3ZThvMm1FZzRxK2J4WXM1SW1kdTdBa2hFN2RKNjNobTIzZ0xNZmVNTGFsUnFvcHUKWEJQd0U1blhQNmFHdVVOSHRHMUs4dFFKRGxaWStMRWJBZU9mUmVOUWhUOU5kUnVrWVNXNTc5dmZLYmxKclN2egp1bGc4OXNWbTNjV0VLNXBCNnJqOXdKYks5NHZvS2Z0VnFiYnVCd1dqZDFhOXBpYktod1ZCZTJMMkZXaHBTWmM1CkYvY29DN25qVGFZVDZ0cjkxeTVWaGhKaElaUUNmL3Z2NFpsNVhoRkhzNVZUWk5iTS9PZnF5RlFMWVhWSk80OEsKRjd0bWF6QUVRUUJRd1ZacUg5QzlOUWR6UEhXbWMzOE9raHRjMXd6YXFuL3JnOSsxc2dBTUQ4aFdDdFFKVWU5NwpiOXltaDVBMFo0UVhLcHlGVDBiK3BYY0QxalJoYTA3VXRrWCsvekxKOUhwQVhjVW16a0crajVDWE5wbnhzSXE1CmZKRmVxM2hCajl3Nm40aCs1ME00VzBGc2U1WW9FVXNjM0IwZno4QmxRQmIrWUpMRkxOSDM0TUg4cDFsMFpEWUoKeWFlMHBzeGxCaWpnNE9QWitXQ0JhK2p0Rlc0TGlXZ0VjeHdnejh3K2hFT0FRcjJhMURjN3c4amQrWTRJSzhVbQpsVFZzNWRicDRtT21QTWxSdi9HTTdrRHVkRnFiTWczWUZ3WGczUWJxdVZxTFp6RXpqVmtDZ2dFQkFQSktaYkNXCllmTGVqa1MvZmtSeVYzVkliNTRtS3dRSG9NV3ViODh0UGdHdVh6anNKeWQ1UVRRNThQcFVqWHJMSG1uOGxTMisKdmlFOEdKeWxLd04xeU1sWnc0MCtrWmhwSFVwQ1d4LzJaS2pBcXZxQTlPT0tvMmZ2NkhkL3dPQW5VNEN0aW9DMQpwcmk3bEtGWVhvUDhEdFFWd0hZdkl6Q1JxRG5oYzRtd0pEcXpUQzl4ZHVJK3N2eHpsNHhIODJmeDBqclBpRlkrCi93T2RYanlmSVBqeWhIQzRqUFRXYmFpcndYUzlkQmpTbDEyOGFJUlQ1ODAveVhFL1NZQXVnZzA1akt0ZzV6UUEKU28xM01UZXpYUkhYZE8wZGkzdEVNSEdSRUVrRnBlVm5uUFF2Q0NlZEswRFYzNmlOd2lXYzhwd2RmTE1WbmVUdApES3daZWRDeCtvLzdldjBDZ2dFQkFPdTQ4REdFSkpKekh4VlI1bVkxSzJBbFp5WXRwVE9XZWhLMXpYNzRKdk0zCll4TjRuZCtaeDVuOXVTUG1tS3pxRjNUVSs0NFJWdGRKSzZlam9GRThkTURUTldhU0xXL1pEbU4xblQwbmp2T24KSVdKbjU5eW5PQ2hXV0taZ1haLzlVcUdSN1B0Nk94U2trZXg5Yy9mWUJzTVgveHVzZFhRaWdlb2dsMGlPWVZGVwpnWElpaUxSTEhwSEpzSy91TnhJaXpqMGhUWVluN3VEN1BSRU53RlJjQ1lmOEoxZVVGYmQ2RHVDVldlUUNLV2dmCk5kMnRTV29pMFZ5bGo0dVVYOEl3MHRqTE5NRDVDUkVKRWs0R1N2NEVEU212VWR2MUxpQktKQ0wybEVjZ29QZUMKb09EMmlDYzVLcWdubVFyYVJpbEZGazhSVlhBOVBXWkdZM0MwYjZUVm1tY0NnZ0VBTlpPMkFPS0FMbENBYlR0YgpGSStrUDA4UlA0dDVINThBTWpac2l3ZWFHbzBRaVduUERxK0ZkNk1JWXBLbjVtdGNBbHZVTVJWb3ZiaW9TSnROCmM2cHNCL3BOZjhKQ044Mm1xSEViN1dseXdNNDZBTUxiWkNXWUZMZThWQkJ2K2lFNEdkQkdQRWZ1NGhLNHZ5VG4KWVpBdlJ6NjRIR280QWRsenRiamc3NlYvbld0Z2dXMDV1TFhjcG01NUtKQVFodisyV1VMakJ3OVBIT0dEb1N3ZgpBbTIrVTU2N3JMaHQ3MHByc1FEajEwbGFKMlF1U0hTMVlYR2xmZUZjdzNlRlVwOVROK0pwdmRvQ29sMmxDSWdsCklIamdaajZPUldmQ3Zwb3hXN1JnQnVadWtxQ0QwUjYwSGRZdGF2eE4zanRpZXBzYXBBODNweE8wSmFwTWdaV1oKcnBVUmtRS0NBUUJPY0V2OUxpdTlUL0dYOXBqa2llelZJWjBoWnk4QjY2RFRlUXZZcEZyUnRDeVQzaDhxdU5GaQp2THRPNXYwSERSNmhFZjVqV0FHOXdldDA3VTM3dWxKZmwraTlLUWRWb0xUWkE5bys3MXJ5V1RzU3MrREQzQ0VqCnl4ZlV4VnhpVUxtZWFpQ2h6aHE2MDhoN0dZUHRoVVU2eGxGdHRBV2hqNW9MZnF6WXlBZzZPTDc2YStOeG0wMmcKMWF5bDNtOFU2ZUFYRjIza3BvVW0rSE5wcVZuR3VKbXpWb1VBNzVZS1orTnJlRWRoU0JiZlB3TjlzSnd0WlVpbAp1N0g0a0hjTTk1SXg4ZXlzQ2pLcUtJcWV6QmxJVGJEVG5qTnZMamNiSjVDKzBhNmx2SVhUMXZRUjUvZUdsYzlNCkJXRTM2MHBOa1YvTEQ4bU9mOUplcGkyUTQzb0RMOUVoQW9JQkFRRFRXSW1meTBLOWdHekEyclB5MTY5bVdZUUsKT2xjbkQzK2hRcTZ4NTFabjFlL3RleEZlVmxoSG40cnJuUmRDRk9BcDQ3dUZrSjJtNzJHQ1ZENzRFd1F1Y0s5eQpBRDVqb3JxZ1ZIcUNLWmRrSGpiMlY2ME16bTZnM3J0TDlXSlhGVkx2TkJiL1FHQjJ2Z0hWT08wenFpcUdaajRlCkV4N2wybS8vNVNFNERMdG43MEo5Q2dHMUh0WENTOGRXckdQTDFwekRuazhWWHRub1h6YjBMQ2hMVUZFZ1pSbWgKY1Y2QUZIRUsySDh3Qkh2aU55ZWhzUlFpRGtsMkFpV09jSk52a3pXNjhjazJuSmpSV3lQWUsxSkwzTkNLcEIzUQpPb2hyUDBmSGNXQVhNVzk3d0ZYWmhSZm5RZkR4eElPbGozTWNZVDBBbGFuWGQwRjROR2MyTnZtcGh4MDQKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-core
type: Opaque
---
apiVersion: v1
data:
  POSTGRES_PASSWORD: Y2hhbmdlaXQ=
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-database
type: Opaque
---
apiVersion: v1
data:
  secret: RUE4UnhhRmVmTDYyeVZLRg==
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-jobservice
type: Opaque
---
apiVersion: v1
data:
  REGISTRY_HTTP_SECRET: Ym4xc2M3dG9HalgzVUZ4RA==
  REGISTRY_REDIS_PASSWORD: ""
kind: Secret
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-registry
type: Opaque
---
apiVersion: v1
data:
  _REDIS_URL: harbor-harbor-redis:6379,100,
  _REDIS_URL_REG: redis://harbor-harbor-redis:6379/2
  ADMIRAL_URL: NA
  CFG_EXPIRATION: "5"
  CHART_CACHE_DRIVER: redis
  CHART_REPOSITORY_URL: http://harbor-harbor-chartmuseum
  CLAIR_ADAPTER_URL: http://harbor-harbor-clair:8080
  CLAIR_DB: postgres
  CLAIR_DB_HOST: harbor-harbor-database
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_SSLMODE: disable
  CLAIR_DB_USERNAME: postgres
  CLAIR_HEALTH_CHECK_SERVER_URL: http://harbor-harbor-clair:6061
  CLAIR_URL: http://harbor-harbor-clair:6060
  CONFIG_PATH: /etc/core/app.conf
  CORE_URL: http://harbor-harbor-core
  DATABASE_TYPE: postgresql
  EXT_ENDPOINT: http://harbor.harbor.svc.cluster.local:80
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  JOBSERVICE_URL: http://harbor-harbor-jobservice
  LOG_LEVEL: debug
  NO_PROXY: harbor-harbor-core,harbor-harbor-jobservice,harbor-harbor-database,harbor-harbor-chartmuseum,harbor-harbor-clair,harbor-harbor-notary-server,harbor-harbor-notary-signer,harbor-harbor-registry,harbor-harbor-portal,127.0.0.1,localhost,.local,.internal
  NOTARY_URL: http://harbor-harbor-notary-server:4443
  PORTAL_URL: http://harbor-harbor-portal
  POSTGRESQL_DATABASE: registry
  POSTGRESQL_HOST: harbor-harbor-database
  POSTGRESQL_MAX_IDLE_CONNS: "50"
  POSTGRESQL_MAX_OPEN_CONNS: "100"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_SSLMODE: disable
  POSTGRESQL_USERNAME: postgres
  REGISTRY_STORAGE_PROVIDER_NAME: filesystem
  REGISTRY_URL: http://harbor-harbor-registry:5000
  REGISTRYCTL_URL: http://harbor-harbor-registry:8080
  SYNC_REGISTRY: "false"
  TOKEN_SERVICE_URL: http://harbor-harbor-core/service/token
  WITH_CHARTMUSEUM: "false"
  WITH_CLAIR: "false"
  WITH_NOTARY: "false"
  app.conf: |
    appname = Harbor
    runmode = dev
    enablegzip = true

    [dev]
    httpport = 8080
    EnableXSRF = true
    XSRFKey = uxTcOren31qanJypA5oO4Z40TwpmjliY91u72PfY
    XSRFExpire = 3600
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-core
---
apiVersion: v1
data:
  config.yml: |
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-jobservice
---
apiVersion: v1
data:
  nginx.conf: "worker_processes auto;\npid /tmp/nginx.pid;\n\nevents {\n  worker_connections
    1024;\n  use epoll;\n  multi_accept on;\n}\n\nhttp {\n  client_body_temp_path
    /tmp/client_body_temp;\n  proxy_temp_path /tmp/proxy_temp;\n  fastcgi_temp_path
    /tmp/fastcgi_temp;\n  uwsgi_temp_path /tmp/uwsgi_temp;\n  scgi_temp_path /tmp/scgi_temp;\n
    \ tcp_nodelay on;\n\n  # this is necessary for us to be able to disable request
    buffering in all cases\n  proxy_http_version 1.1;\n\n  upstream core {\n    server
    harbor-harbor-core;\n  }\n\n  upstream portal {\n    server harbor-harbor-portal;\n
    \ }\n\n  log_format timed_combined '[$time_local]:$remote_addr - '\n    '\"$request\"
    $status $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" '\n    '$request_time
    $upstream_response_time $pipe';\n\n  access_log /dev/stdout timed_combined;\n\n
    \ server {\n    listen 8080;\n    server_tokens off;\n    # disable any limits
    to avoid HTTP 413 for large image uploads\n    client_max_body_size 0;\n\n    #
    Add extra headers\n    add_header X-Frame-Options DENY;\n    add_header Content-Security-Policy
    \"frame-ancestors 'none'\";\n\n    location / {\n      proxy_pass http://portal/;\n
    \     proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n
    \     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      \n      #
    When setting up Harbor behind other proxy, such as an Nginx instance, remove the
    below line if the proxy already has similar settings.\n      proxy_set_header
    X-Forwarded-Proto $scheme;\n      \n      proxy_buffering off;\n      proxy_request_buffering
    off;\n    }\n\n    location /api/ {\n      proxy_pass http://core/api/;\n      proxy_set_header
    Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header
    X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # When setting up Harbor
    behind other proxy, such as an Nginx instance, remove the below line if the proxy
    already has similar settings.\n      proxy_set_header X-Forwarded-Proto $scheme;\n
    \     \n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n
    \   \n    location /chartrepo/ {\n      proxy_pass http://core/chartrepo/;\n      proxy_set_header
    Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header
    X-Forwarded-For $proxy_add_x_forwarded_for;\n\n      # When setting up Harbor
    behind other proxy, such as an Nginx instance, remove the below line if the proxy
    already has similar settings.\n      proxy_set_header X-Forwarded-Proto $scheme;\n\n
    \     proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location
    /c/ {\n      proxy_pass http://core/c/;\n      proxy_set_header Host $host;\n
    \     proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For
    $proxy_add_x_forwarded_for;\n\n      # When setting up Harbor behind other proxy,
    such as an Nginx instance, remove the below line if the proxy already has similar
    settings.\n      proxy_set_header X-Forwarded-Proto $scheme;\n      \n      proxy_buffering
    off;\n      proxy_request_buffering off;\n    }\n\n    location /v1/ {\n      return
    404;\n    }\n\n    location /v2/ {\n      proxy_pass http://core/v2/;\n      proxy_set_header
    Host $http_host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header
    X-Forwarded-For $proxy_add_x_forwarded_for;\n      \n      # When setting up Harbor
    behind other proxy, such as an Nginx instance, remove the below line if the proxy
    already has similar settings.\n      proxy_set_header X-Forwarded-Proto $scheme;\n
    \     proxy_buffering off;\n      proxy_request_buffering off;\n    }\n\n    location
    /service/ {\n      proxy_pass http://core/service/;\n      proxy_set_header Host
    $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header
    X-Forwarded-For $proxy_add_x_forwarded_for;\n      \n      # When setting up Harbor
    behind other proxy, such as an Nginx instance, remove the below line if the proxy
    already has similar settings.\n      proxy_set_header X-Forwarded-Proto $scheme;\n
    \     \n      proxy_buffering off;\n      proxy_request_buffering off;\n    }\n
    \ \n  location /service/notifications {\n      return 404;\n    }\n  }\n}\n"
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-nginx
---
apiVersion: v1
data:
  config.yml: |
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: "harbor-harbor-redis:6379"
      db: 2
    http:
      relativeurls: true
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "http://harbor.harbor.svc.cluster.local:80/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    validation:
      disabled: true
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
          ignoredmediatypes:
            - application/vnd.docker.image.rootfs.diff.tar.gzip
            - application/vnd.docker.image.rootfs.foreign.diff.tar.gzip
            - application/vnd.oci.image.layer.v1.tar
            - application/vnd.oci.image.layer.v1.tar+gzip
            - application/vnd.oci.image.layer.v1.tar+zstd
            - application/vnd.oci.image.layer.nondistributable.v1.tar
            - application/vnd.oci.image.layer.nondistributable.v1.tar+gzip
            - application/vnd.oci.image.layer.nondistributable.v1.tar+zstd
            - application/octet-stream
  ctl-config.yml: |
    ---
    protocol: "http"
    port: 8080
    log_level: debug
kind: ConfigMap
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-registry
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-harbor-jobservice
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-harbor-registry
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-core
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: core
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-database
spec:
  ports:
  - port: 5432
  selector:
    app: harbor
    component: database
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-jobservice
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: jobservice
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: nginx
    release: harbor
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-portal
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: harbor
    component: portal
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-redis
spec:
  ports:
  - port: 6379
  selector:
    app: harbor
    component: redis
    release: harbor
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: harbor
    chart: harbor
    heritage: Helm
    release: harbor
  name: harbor-harbor-registry
spec:
  ports:
  - name: registry
    port: 5000
  - name: controller
    port: 8080
  selector:
    app: harbor
    component: registry
    release: harbor
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/harbor-core:v1.10.4
        URL: index.docker.io/goharbor/harbor-core@sha256:d326c23b93a98dfaef1f6ff981ea2eaa9530ca7d3bebd3b81fbaac864042e2c9
  labels:
    app: harbor
    chart: harbor
    component: core
    heritage: Helm
    release: harbor
  name: harbor-harbor-core
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: core
      release: harbor
  template:
    metadata:
      annotations:
        checksum/configmap: feed1ae2029a22ddaf691ff1e81779163850569e4193c779d328eb63a140558e
        checksum/secret: 510032f366086c1a5c418825a82c8acec4dea5da0cb9083ff77ccd00938718a0
        checksum/secret-jobservice: 7f631569b915619c435f926d7cd56675a9b445caa1e1861d8aa79dc10488764a
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        component: core
        release: harbor
    spec:
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-harbor-jobservice
        envFrom:
        - configMapRef:
            name: harbor-harbor-core
        - secretRef:
            name: harbor-harbor-core
        image: index.docker.io/goharbor/harbor-core@sha256:d326c23b93a98dfaef1f6ff981ea2eaa9530ca7d3bebd3b81fbaac864042e2c9
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        name: core
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/core/app.conf
          name: config
          subPath: app.conf
        - mountPath: /etc/core/key
          name: secret-key
          subPath: key
        - mountPath: /etc/core/private_key.pem
          name: token-service-private-key
          subPath: tls.key
        - mountPath: /etc/core/token
          name: psc
      securityContext:
        fsGroup: 10000
      volumes:
      - configMap:
          items:
          - key: app.conf
            path: app.conf
          name: harbor-harbor-core
        name: config
      - name: secret-key
        secret:
          items:
          - key: secretKey
            path: key
          secretName: harbor-harbor-core
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - emptyDir: {}
        name: psc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/harbor-jobservice:v1.10.4
        URL: index.docker.io/goharbor/harbor-jobservice@sha256:124c3a245f2f082c916dbb835bd7e1739e2cdb6b934959f8af69f5012367d4ee
  labels:
    app: harbor
    chart: harbor
    component: jobservice
    heritage: Helm
    release: harbor
  name: harbor-harbor-jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: jobservice
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 23a75a60a28dbe0ba49e366d2004dce405a18eb4cd61cd61b62155e1d5887ce4
        checksum/secret: abddffd1645b7b26f1e5a40394fe018d1c0d37666707a0bd08f2f8bf2435c583
        checksum/secret-core: 8b5241409f36d37d8bc4d176f0788aeec955bb87335d84a0675c40cf93edb6d0
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        chart: harbor
        component: jobservice
        heritage: Helm
        release: harbor
    spec:
      containers:
      - env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-harbor-jobservice
        - name: CORE_URL
          value: http://harbor-harbor-core
        - name: REGISTRY_CONTROLLER_URL
          value: http://harbor-harbor-registry:8080
        - name: LOG_LEVEL
          value: debug
        - name: HTTP_PROXY
          value: ""
        - name: HTTPS_PROXY
          value: ""
        - name: NO_PROXY
          value: harbor-harbor-core,harbor-harbor-jobservice,harbor-harbor-database,harbor-harbor-chartmuseum,harbor-harbor-clair,harbor-harbor-notary-server,harbor-harbor-notary-signer,harbor-harbor-registry,harbor-harbor-portal,127.0.0.1,localhost,.local,.internal
        image: index.docker.io/goharbor/harbor-jobservice@sha256:124c3a245f2f082c916dbb835bd7e1739e2cdb6b934959f8af69f5012367d4ee
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        name: jobservice
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/jobservice/config.yml
          name: jobservice-config
          subPath: config.yml
        - mountPath: /var/log/jobs
          name: job-logs
          subPath: null
      securityContext:
        fsGroup: 10000
      volumes:
      - configMap:
          name: harbor-harbor-jobservice
        name: jobservice-config
      - name: job-logs
        persistentVolumeClaim:
          claimName: harbor-harbor-jobservice
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/nginx-photon:v1.10.4
        URL: index.docker.io/goharbor/nginx-photon@sha256:f7424ef111f1feb3ae18cd5ed32fe531d9cdfa204c079f8091a3fa842481dad2
  labels:
    app: harbor
    chart: harbor
    component: nginx
    heritage: Helm
    release: harbor
  name: harbor-harbor-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: nginx
      release: harbor
  template:
    metadata:
      annotations:
        checksum/configmap: 5edd589ec623ce16d50869b7767a598d879bf1d5be1596194356f9a1048dc753
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        chart: harbor
        component: nginx
        heritage: Helm
        release: harbor
    spec:
      containers:
      - image: index.docker.io/goharbor/nginx-photon@sha256:f7424ef111f1feb3ae18cd5ed32fe531d9cdfa204c079f8091a3fa842481dad2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 10
        name: nginx
        ports:
        - containerPort: 8080
        - containerPort: 8443
        - containerPort: 4443
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /etc/nginx/nginx.conf
          name: config
          subPath: nginx.conf
      securityContext:
        fsGroup: 10000
      volumes:
      - configMap:
          name: harbor-harbor-nginx
        name: config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/harbor-portal:v1.10.4
        URL: index.docker.io/goharbor/harbor-portal@sha256:1b3677e66755a1891004ca8cce230e7398a2576ee1a4f09696e067c2ae464b26
  labels:
    app: harbor
    chart: harbor
    component: portal
    heritage: Helm
    release: harbor
  name: harbor-harbor-portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: portal
      release: harbor
  template:
    metadata:
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        component: portal
        release: harbor
    spec:
      containers:
      - image: index.docker.io/goharbor/harbor-portal@sha256:1b3677e66755a1891004ca8cce230e7398a2576ee1a4f09696e067c2ae464b26
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        name: portal
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/harbor-registryctl:v1.10.4
        URL: index.docker.io/goharbor/harbor-registryctl@sha256:a5794c575bb83348f992bf961d64afff3db7c7e11129e26357d3d3314807a221
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/registry-photon:v1.10.4
        URL: index.docker.io/goharbor/registry-photon@sha256:e7e5c0f823418351059cc7cd0685fa0d578eb799be29ad48120ec07f438547f7
  labels:
    app: harbor
    chart: harbor
    component: registry
    heritage: Helm
    release: harbor
  name: harbor-harbor-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: registry
      release: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: 314b8e0f1b7e2840a95298177f4eae1c3ba5c8c4969dd5010172ddd10b137cf5
        checksum/secret: 94d82d075c57300345544a4a02d80cac5424b75a36fd4eac8bdba8c5e6873090
        checksum/secret-core: 7d5fe7afdf0f1d85c51edf7fc324ceb1cd0cae8f208ff68eaabbed9f0db4e338
        checksum/secret-jobservice: 6f25ef578e24a8750e8448c7c2675cecf4860046e8423e257889080fbcac61fa
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        chart: harbor
        component: registry
        heritage: Helm
        release: harbor
    spec:
      containers:
      - args:
        - serve
        - /etc/registry/config.yml
        envFrom:
        - secretRef:
            name: harbor-harbor-registry
        image: index.docker.io/goharbor/registry-photon@sha256:e7e5c0f823418351059cc7cd0685fa0d578eb799be29ad48120ec07f438547f7
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        name: registry
        ports:
        - containerPort: 5000
        - containerPort: 5001
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/root.crt
          name: registry-root-certificate
          subPath: tls.crt
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
      - args:
        - serve
        - /etc/registry/config.yml
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-harbor-core
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              key: secret
              name: harbor-harbor-jobservice
        envFrom:
        - secretRef:
            name: harbor-harbor-registry
        image: index.docker.io/goharbor/harbor-registryctl@sha256:a5794c575bb83348f992bf961d64afff3db7c7e11129e26357d3d3314807a221
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        name: registryctl
        ports:
        - containerPort: 8080
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /storage
          name: registry-data
          subPath: null
        - mountPath: /etc/registry/config.yml
          name: registry-config
          subPath: config.yml
        - mountPath: /etc/registryctl/config.yml
          name: registry-config
          subPath: ctl-config.yml
      securityContext:
        fsGroup: 10000
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - configMap:
          name: harbor-harbor-registry
        name: registry-config
      - name: registry-data
        persistentVolumeClaim:
          claimName: harbor-harbor-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/harbor-db:v1.10.4
        URL: index.docker.io/goharbor/harbor-db@sha256:41397c9fe5d8f46e11c92691344c842304a69e38b6268e623df768b866bed73d
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/harbor-db:v1.10.4
        URL: index.docker.io/goharbor/harbor-db@sha256:41397c9fe5d8f46e11c92691344c842304a69e38b6268e623df768b866bed73d
      - Metas:
        - Tag: latest
          Type: resolved
          URL: busybox:latest
        URL: index.docker.io/library/busybox@sha256:c3dbcbbf6261c620d133312aee9e858b45e1b686efbcead7b34d9aae58a37378
  labels:
    app: harbor
    chart: harbor
    component: database
    heritage: Helm
    release: harbor
  name: harbor-harbor-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: database
      release: harbor
  serviceName: harbor-harbor-database
  template:
    metadata:
      annotations:
        checksum/secret: 4ff26e469c2bc466552f28d545ad293be56c436790a6f26c8e0cf2497aaa08b2
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        chart: harbor
        component: database
        heritage: Helm
        release: harbor
    spec:
      containers:
      - envFrom:
        - secretRef:
            name: harbor-harbor-database
        image: index.docker.io/goharbor/harbor-db@sha256:41397c9fe5d8f46e11c92691344c842304a69e38b6268e623df768b866bed73d
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
        name: database
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: database-data
          subPath: null
      initContainers:
      - args:
        - -c
        - chown -R 999:999 /var/lib/postgresql/data
        command:
        - /bin/sh
        image: index.docker.io/library/busybox@sha256:c3dbcbbf6261c620d133312aee9e858b45e1b686efbcead7b34d9aae58a37378
        imagePullPolicy: IfNotPresent
        name: change-permission-of-directory
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: database-data
          subPath: null
      - command:
        - rm
        - -Rf
        - /var/lib/postgresql/data/lost+found
        image: index.docker.io/goharbor/harbor-db@sha256:41397c9fe5d8f46e11c92691344c842304a69e38b6268e623df768b866bed73d
        imagePullPolicy: IfNotPresent
        name: remove-lost-found
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: database-data
          subPath: null
  volumeClaimTemplates:
  - metadata:
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: database-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kbld.k14s.io/images: |
      - Metas:
        - Tag: v1.10.4
          Type: resolved
          URL: goharbor/redis-photon:v1.10.4
        URL: index.docker.io/goharbor/redis-photon@sha256:0915d761e18d2134faa7e301c2113f329c45b9e01632ba833305772a84805b16
  labels:
    app: harbor
    chart: harbor
    component: redis
    heritage: Helm
    release: harbor
  name: harbor-harbor-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: harbor
      component: redis
      release: harbor
  serviceName: harbor-harbor-redis
  template:
    metadata:
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
      labels:
        app: harbor
        chart: harbor
        component: redis
        heritage: Helm
        release: harbor
    spec:
      containers:
      - image: index.docker.io/goharbor/redis-photon@sha256:0915d761e18d2134faa7e301c2113f329c45b9e01632ba833305772a84805b16
        imagePullPolicy: IfNotPresent
        livenessProbe:
          initialDelaySeconds: 300
          periodSeconds: 10
          tcpSocket:
            port: 6379
        name: redis
        readinessProbe:
          initialDelaySeconds: 1
          periodSeconds: 10
          tcpSocket:
            port: 6379
        volumeMounts:
        - mountPath: /var/lib/redis
          name: data
          subPath: null
      securityContext:
        fsGroup: 999
  volumeClaimTemplates:
  - metadata:
      labels:
        app: harbor
        chart: harbor
        heritage: Helm
        release: harbor
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: standard
